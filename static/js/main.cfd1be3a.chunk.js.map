{"version":3,"sources":["reducer/index.ts","context/index.ts","components/calendar/index.tsx","components/calendar/CalendarBodyDay.tsx","components/calendar/CalendarHeaderBar.tsx","components/calendar/CalenderWeekdaysBar.tsx","components/calendar/CalendarBodyMonth.tsx","components/calendar/CalendarBodyYear.tsx","components/eventForm/index.tsx","components/eventList/header.tsx","components/eventList/event.tsx","components/eventList/index.tsx","components/legend/index.tsx","App.tsx","index.tsx"],"names":["ReducerTypes","initialState","selectedDate","moment","format","eventList","AppContext","createContext","state","dispatch","SelectionMode","reducer","action","type","UpdateDate","payload","AddEvent","events","Object","keys","some","key","push","DeleteEvent","CalendarBodyDay","props","useContext","weeks","setDate","Grid","container","spacing","style","border","backgroundColor","height","length","map","week","weekIndex","item","xs","direction","justify","alignContent","dayDetail","dayIndex","className","today","selected","day","onClick","ofMonth","month","year","selectedDayClick","Typography","variant","align","color","visibility","CalendarHeaderBar","monthName","setMonth","setModeSelection","setYear","alignItems","Month","Year","CalenderWeekdaysBar","mode","weekdayShortName","weekdaysShort","weekday","CalendarBodyMonth","monthLongNameArry","useState","months","setMonths","useEffect","monthArr","i","slice","monthsArr","index","subIndex","None","CalendarBodyYear","years","setYears","yearsArr","currentYear","handleYearClick","EventTypes","Calendar","globalDate","date","setWeeks","modeSelection","storedDate","selectedDateMonth","selectedDateYear","numberOfDaysOfPreviousMonth","daysInMonth","firstDayOfMonth","startOf","days","results","missingDays","Header","isFormOpen","setIsFormOpen","paddingLeft","fontSize","EventForm","name","setName","Appointment","setType","hour","time","setTime","padding","marginBottom","cursor","display","flexDirection","width","autoComplete","onSubmit","event","preventDefault","onFormSubmit","FormControl","component","TextField","id","label","value","onChange","target","required","FormLabel","RadioGroup","FormControlLabel","control","Radio","Meeting","Task","defaultValue","marginTop","Button","endIcon","eventTypeColor","Event","overflowY","CardHeader","avatar","Avatar","eventsToSplice","splice","deleteEvent","title","subheader","EventList","Legend","eventDetailsArray","eventDetail","marginRight","App","useReducer","Provider","Dialog","open","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfd1be3a.chunk.js","sourcesContent":["export enum ReducerTypes {\n  UpdateDate = \"UPDATE_DATE\",\n  AddEvent = \"ADD_EVENT\",\n  DeleteEvent = \"DELETE_EVENT\",\n}\n\nexport interface Event {\n  name: string;\n  time: string;\n  type: string;\n}\n\nexport interface State {\n  selectedDate: string;\n  eventList: {\n    [key: string]: Array<Event>;\n  };\n}\n\ninterface Action {\n  type: string;\n  payload: any;\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ReducerTypes.UpdateDate:\n      return {\n        ...state,\n        selectedDate: action.payload,\n      };\n    case ReducerTypes.AddEvent:\n      const keys = Object.keys(state.eventList);\n      const exist = keys.some((key: string) => key === state.selectedDate);\n      let events: Array<Event> = [];\n      if (exist) {\n        events = [\n          ...state.eventList[state.selectedDate],\n          { ...action.payload },\n        ];\n      } else {\n        events.push(action.payload);\n      }\n      return {\n        ...state,\n        eventList: {\n          ...state.eventList,\n          [state.selectedDate]: events,\n        },\n      };\n    case ReducerTypes.DeleteEvent:\n      return {\n        ...state,\n        eventList: {\n          ...state.eventList,\n          [state.selectedDate]: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { createContext } from \"react\";\nimport moment from \"moment\";\nimport { State } from \"../reducer\";\n\nexport const initialState: State = {\n  selectedDate: moment().format(\"DD-MM-YYYY\"),\n  eventList: {},\n};\n\nconst AppContext = createContext<{\n  state: State;\n  dispatch: React.Dispatch<any>;\n}>({ state: initialState, dispatch: () => null });\n\nexport default AppContext;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport CalendarBodyDay from \"./CalendarBodyDay\";\nimport CalendarHeaderBar from \"./CalendarHeaderBar\";\nimport CalenderWeekdaysBar from \"./CalenderWeekdaysBar\";\nimport CalendarBodyMonth from \"./CalendarBodyMonth\";\nimport CalendarBodyYear from \"./CalendarBodyYear\";\nimport AppContext from \"../../context\";\n\nexport enum SelectionMode {\n  None = \"\",\n  Month = \"MONTH\",\n  Year = \"YEAR\",\n}\nexport interface DayDetail {\n  day: number;\n  month: number;\n  year: number;\n  ofMonth: boolean;\n  today: boolean;\n  selected: boolean;\n}\n\nconst Calendar = () => {\n  const monthLongNameArry: Array<string> = moment.months();\n\n  const { state } = useContext(AppContext);\n  const { selectedDate: globalDate } = state;\n\n  const [date, setDate] = useState(moment().date());\n  const [weeks, setWeeks] = useState<Array<Array<DayDetail>>>([]);\n  const [month, setMonth] = useState<number>(+moment().month());\n  const [year, setYear] = useState<number>(moment().year());\n  const [modeSelection, setModeSelection] = useState<string>(\"\");\n\n  useEffect(() => {\n    const today = moment();\n    const storedDate = moment(globalDate, \"DD-MM-YYYY\");\n    const selectedDate = moment(`${date}-${month + 1}-${year}`, \"DD-MM-YYYY\");\n    const selectedDateMonth = selectedDate.month();\n    const selectedDateYear = selectedDate.year();\n    const numberOfDaysOfPreviousMonth = +moment(\n      `${selectedDate.year()}-${\n        selectedDate.month() ? selectedDate.month() : \"12\"\n      }`,\n      \"YYYY-MM\"\n    ).daysInMonth();\n    const firstDayOfMonth: number = +moment(selectedDate)\n      .startOf(\"month\")\n      .format(\"d\");\n    let days: Array<DayDetail> = [];\n    const results: Array<Array<DayDetail>> = [];\n\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      days.push({\n        day: numberOfDaysOfPreviousMonth - firstDayOfMonth + i + 1,\n        month: selectedDateMonth ? selectedDateMonth - 1 : 11,\n        year: selectedDateMonth ? selectedDateYear : selectedDateYear - 1,\n        ofMonth: false,\n        today: false,\n        selected:\n          storedDate.date() ===\n            numberOfDaysOfPreviousMonth - firstDayOfMonth + i + 1 &&\n          storedDate.month() === selectedDateMonth - 1 &&\n          storedDate.year() === selectedDateYear,\n      });\n    }\n\n    for (let i = 1; i <= selectedDate.daysInMonth(); i++) {\n      days.push({\n        day: +i,\n        month: selectedDateMonth,\n        year: selectedDateYear,\n        ofMonth: true,\n        today:\n          today.date() === i &&\n          today.month() === selectedDateMonth &&\n          today.year() === selectedDateYear,\n        selected:\n          storedDate.date() === i &&\n          storedDate.month() === selectedDateMonth &&\n          storedDate.year() === selectedDateYear,\n      });\n    }\n\n    const missingDays = 42 - days.length;\n    for (let i = days.length; i < 42; i++) {\n      days.push({\n        day: missingDays - (42 - i) + 1,\n        month: selectedDateMonth === 11 ? 0 : selectedDateMonth + 1,\n        year:\n          selectedDateMonth === 11 ? selectedDateYear + 1 : selectedDateYear,\n        ofMonth: false,\n        today: false,\n        selected:\n          storedDate.date() === missingDays - (42 - i) + 1 &&\n          storedDate.month() === selectedDateMonth + 1 &&\n          storedDate.year() === selectedDateYear,\n      });\n    }\n\n    for (let i = 0; i < 6; i++) {\n      results.push(days.slice(7 * i, 7 * (i + 1)));\n    }\n\n    setWeeks(results);\n\n    return () => {};\n  }, [date, month, year, globalDate]);\n\n  return (\n    <div>\n      <CalendarHeaderBar\n        monthName={monthLongNameArry[month]}\n        month={month}\n        setMonth={setMonth}\n        setModeSelection={setModeSelection}\n        year={year}\n        setYear={setYear}\n      />\n      <CalenderWeekdaysBar mode={modeSelection} />\n      {modeSelection === SelectionMode.Year ? (\n        <CalendarBodyYear\n          setYear={setYear}\n          setModeSelection={setModeSelection}\n        />\n      ) : modeSelection === SelectionMode.Month ? (\n        <CalendarBodyMonth\n          monthLongNameArry={monthLongNameArry}\n          setMonth={setMonth}\n          setModeSelection={setModeSelection}\n        />\n      ) : (\n        <CalendarBodyDay weeks={weeks} setDate={setDate} />\n      )}\n    </div>\n  );\n};\n\nexport default Calendar;\n","import React, { useContext } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { DayDetail } from \"./index\";\nimport \"./calendar.css\";\nimport AppContext from \"../../context\";\nimport { ReducerTypes } from \"../../reducer\";\n\ninterface Props {\n  weeks: Array<Array<DayDetail>>;\n  setDate: (date: number) => void;\n}\n\nconst CalendarBodyDay = (props: Props) => {\n  const { state, dispatch } = useContext(AppContext);\n  const { eventList } = state;\n\n  const { weeks, setDate } = props;\n\n  const selectedDayClick = (dayDetail: DayDetail) => {\n    if (dayDetail.ofMonth) setDate(dayDetail.day);\n    dispatch({\n      type: ReducerTypes.UpdateDate,\n      payload: `${dayDetail.day}-${dayDetail.month < 10 ? \"0\" : \"\"}${\n        dayDetail.month + 1\n      }-${dayDetail.year}`,\n    });\n  };\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      style={{\n        border: \"1px solid black\",\n        backgroundColor: \"#f1faee\",\n        height: \"100%\",\n      }}\n    >\n      {weeks.length ? (\n        weeks.map((week: Array<DayDetail>, weekIndex: number) => (\n          <Grid\n            key={weekIndex}\n            container\n            item\n            xs={12}\n            spacing={1}\n            direction=\"row\"\n            justify=\"space-evenly\"\n            alignContent=\"center\"\n          >\n            {week.map((dayDetail: DayDetail, dayIndex: number) => (\n              <Grid\n                className={`hover clickable ${dayDetail.today ? \"today\" : \"\"} ${\n                  dayDetail.selected ? \"selected\" : \"\"\n                }`}\n                item\n                key={+`${weekIndex}${dayIndex}${dayDetail.day}`}\n                xs={1}\n                onClick={() => selectedDayClick(dayDetail)}\n              >\n                <Typography\n                  variant=\"h5\"\n                  align=\"center\"\n                  style={{ color: dayDetail.ofMonth ? \"#000000\" : \"#a7afb2\" }}\n                >\n                  {dayDetail.day || \"\"}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  align=\"center\"\n                  style={{\n                    color: \"#a8dadc\",\n                    visibility:\n                      eventList[\n                        `${dayDetail.day}-${dayDetail.month < 10 ? \"0\" : \"\"}${\n                          dayDetail.month + 1\n                        }-${dayDetail.year}`\n                      ] &&\n                      eventList[\n                        `${dayDetail.day}-${dayDetail.month < 10 ? \"0\" : \"\"}${\n                          dayDetail.month + 1\n                        }-${dayDetail.year}`\n                      ].length\n                        ? \"visible\"\n                        : \"hidden\",\n                  }}\n                >\n                  {eventList[\n                    `${dayDetail.day}-${dayDetail.month < 10 ? \"0\" : \"\"}${\n                      dayDetail.month + 1\n                    }-${dayDetail.year}`\n                  ]\n                    ? eventList[\n                        `${dayDetail.day}-${dayDetail.month < 10 ? \"0\" : \"\"}${\n                          dayDetail.month + 1\n                        }-${dayDetail.year}`\n                      ].length\n                    : `0`}\n                </Typography>\n              </Grid>\n            ))}\n          </Grid>\n        ))\n      ) : (\n        <div />\n      )}\n    </Grid>\n  );\n};\n\nexport default CalendarBodyDay;\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport { SelectionMode } from \"./index\";\nimport \"./calendar.css\";\ninterface Props {\n  monthName: string;\n  month: number;\n  setMonth: (month: number) => void;\n  setModeSelection: (mode: string) => void;\n  year: number;\n  setYear: (year: number) => void;\n}\n\nconst CalendarHeaderBar = (props: Props) => {\n  const { monthName, month, setMonth, setModeSelection, year, setYear } = props;\n  const handlePreviousButton = () => {\n    if (month === 0) {\n      setMonth(11);\n      setYear(year - 1);\n    } else {\n      setMonth(month - 1);\n    }\n  };\n\n  const handleNextButton = () => {\n    if (month === 11) {\n      setMonth(0);\n      setYear(year + 1);\n    } else {\n      setMonth(month + 1);\n    }\n  };\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"row\"\n      justify=\"space-evenly\"\n      alignItems=\"center\"\n      style={{ border: \"1px solid black\", backgroundColor: \"#e63946\" }}\n    >\n      <Grid item xs={2}>\n        <KeyboardArrowLeftIcon\n          style={{ color: \"#ffffff\" }}\n          className=\"clickable\"\n          onClick={handlePreviousButton}\n        />\n      </Grid>\n      <Grid item xs={3}>\n        <Typography\n          className=\"clickable\"\n          variant=\"h5\"\n          align=\"center\"\n          style={{ color: \"#ffffff\" }}\n          onClick={() => setModeSelection(SelectionMode.Month)}\n        >\n          {monthName}\n        </Typography>\n      </Grid>\n      <Grid item xs={3}>\n        <Typography\n          className=\"clickable\"\n          variant=\"h5\"\n          align=\"center\"\n          style={{ color: \"#ffffff\" }}\n          onClick={() => setModeSelection(SelectionMode.Year)}\n        >\n          {year}\n        </Typography>\n      </Grid>\n      <Grid container item xs={2} justify=\"flex-end\">\n        <KeyboardArrowRightIcon\n          style={{ color: \"#ffffff\" }}\n          className=\"clickable\"\n          onClick={handleNextButton}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default CalendarHeaderBar;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\ninterface Props {\n  mode: string;\n}\nconst CalenderWeekdaysBar = (props: Props) => {\n  const { mode } = props;\n\n  const weekdayShortName: Array<string> = moment.weekdaysShort();\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"row\"\n      justify=\"space-evenly\"\n      alignItems=\"center\"\n      style={{ border: \"1px solid black\", backgroundColor: \"#1d3557\" }}\n    >\n      {mode ? (\n        <Grid item xs={12}>\n          <Typography variant=\"h5\" align=\"center\" style={{ color: \"#ffffff\" }}>\n            {`Select a ${mode}`}\n          </Typography>\n        </Grid>\n      ) : (\n        weekdayShortName.map((weekday: string) => (\n          <Grid item key={weekday} xs={1}>\n            <Typography\n              variant=\"h5\"\n              align=\"center\"\n              style={{ color: \"#ffffff\" }}\n            >\n              {weekday}\n            </Typography>\n          </Grid>\n        ))\n      )}\n    </Grid>\n  );\n};\n\nexport default CalenderWeekdaysBar;\n","import { Grid, Typography } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { SelectionMode } from \".\";\nimport \"./calendar.css\";\n\ninterface Props {\n  monthLongNameArry: Array<string>;\n  setMonth: (month: number) => void;\n  setModeSelection: (mode: string) => void;\n}\nconst CalendarBodyMonth = (props: Props) => {\n  const { monthLongNameArry, setMonth, setModeSelection } = props;\n\n  const [months, setMonths] = useState<Array<Array<string>>>([]);\n\n  useEffect(() => {\n    let monthArr: Array<Array<string>> = [];\n    for (let i = 0; i < 4; i++) {\n      monthArr.push(monthLongNameArry.slice(3 * i, 3 * (i + 1)));\n    }\n    setMonths(monthArr);\n    return () => {};\n  }, [monthLongNameArry]);\n\n  const handleMonthClick = (monthIndex: number) => {\n    setMonth(monthIndex);\n    setModeSelection(SelectionMode.None);\n  };\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      style={{\n        border: \"1px solid black\",\n        backgroundColor: \"#f1faee\",\n        height: 420,\n      }}\n    >\n      {months.length ? (\n        months.map((monthsArr: Array<string>, index: number) => (\n          <Grid\n            key={index}\n            container\n            item\n            xs={12}\n            spacing={1}\n            direction=\"row\"\n            justify=\"space-evenly\"\n            alignContent=\"center\"\n          >\n            {monthsArr.map((month: string, subIndex: number) => (\n              <Grid item key={`${month}`} xs={4} className=\"clickable hover\">\n                <Typography\n                  variant=\"h5\"\n                  align=\"center\"\n                  onClick={() => handleMonthClick(3 * index + subIndex)}\n                >\n                  {`${month}`}\n                </Typography>\n              </Grid>\n            ))}\n          </Grid>\n        ))\n      ) : (\n        <div />\n      )}\n    </Grid>\n  );\n};\n\nexport default CalendarBodyMonth;\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SelectionMode } from \".\";\n\ninterface Props {\n  setYear: (year: number) => void;\n  setModeSelection: (mode: string) => void;\n}\nconst CalendarBodyYear = (props: Props) => {\n  const { setYear, setModeSelection } = props;\n\n  const [years, setYears] = useState<Array<Array<number>>>([]);\n\n  useEffect(() => {\n    const yearsArr: Array<Array<number>> = [];\n    const currentYear = moment().year();\n    for (let i = 0; i < 4; i++) {\n      yearsArr.push([\n        currentYear + 3 * i,\n        currentYear + 3 * i + 1,\n        currentYear + 3 * i + 2,\n      ]);\n    }\n    setYears(yearsArr);\n    return () => {};\n  }, []);\n\n  const handleYearClick = (year: number) => {\n    setYear(year);\n    setModeSelection(SelectionMode.None);\n  };\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      style={{\n        border: \"1px solid black\",\n        backgroundColor: \"#f1faee\",\n        height: 420,\n      }}\n    >\n      {years.length ? (\n        years.map((yearsArr: Array<number>, index: number) => (\n          <Grid\n            key={index}\n            container\n            item\n            xs={12}\n            spacing={1}\n            direction=\"row\"\n            justify=\"space-evenly\"\n            alignContent=\"center\"\n          >\n            {yearsArr.map((year: number) => (\n              <Grid item key={`${year}`} xs={4} className=\"clickable hover\">\n                <Typography\n                  variant=\"h5\"\n                  align=\"center\"\n                  onClick={() => handleYearClick(year)}\n                >\n                  {`${year}`}\n                </Typography>\n              </Grid>\n            ))}\n          </Grid>\n        ))\n      ) : (\n        <div />\n      )}\n    </Grid>\n  );\n};\n\nexport default CalendarBodyYear;\n","import React, { useState, useContext } from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport CancelOutlinedIcon from \"@material-ui/icons/CancelOutlined\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport moment from \"moment\";\nimport AppContext from \"../../context\";\nimport { ReducerTypes } from \"../../reducer\";\n\nexport enum EventTypes {\n  Appointment = \"A\",\n  Meeting = \"M\",\n  Task = \"T\",\n}\n\ninterface Props {\n  setIsFormOpen: (isFormOpen: boolean) => void;\n}\nconst EventForm = (props: Props) => {\n  const { dispatch } = useContext(AppContext);\n\n  const { setIsFormOpen } = props;\n\n  const [name, setName] = useState<string>(\"\");\n  const [type, setType] = useState<string>(EventTypes.Appointment);\n  const [time, setTime] = useState<string>(\n    `${\n      moment().hour() - 10 < 0 ? `0${moment().hour()}` : `${moment().hour()}`\n    }:00`\n  );\n\n  const onFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    dispatch({\n      type: ReducerTypes.AddEvent,\n      payload: {\n        name,\n        type,\n        time,\n      },\n    });\n    setIsFormOpen(false);\n  };\n  return (\n    <Grid container style={{ padding: 20 }}>\n      <Grid container style={{ marginBottom: 10 }} justify=\"space-between\">\n        <Typography variant=\"h5\">New Event</Typography>\n        <CancelOutlinedIcon\n          onClick={() => {\n            setIsFormOpen(false);\n          }}\n          style={{ cursor: \"pointer\" }}\n        />\n      </Grid>\n      <Grid container>\n        <form\n          style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}\n          autoComplete=\"off\"\n          onSubmit={(event) => {\n            onFormSubmit(event);\n          }}\n        >\n          <FormControl component=\"fieldset\" style={{ marginBottom: 10 }}>\n            <TextField\n              id=\"name\"\n              label=\"Name\"\n              value={name}\n              onChange={(event) => {\n                setName(event.target.value);\n              }}\n              required\n            />\n          </FormControl>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Gender</FormLabel>\n            <RadioGroup\n              name=\"gender1\"\n              value={type}\n              onChange={(event) => {\n                setType(event.target.value);\n              }}\n              style={{ paddingLeft: 20 }}\n            >\n              <FormControlLabel\n                value={EventTypes.Appointment}\n                control={<Radio />}\n                label=\"Appointment\"\n              />\n              <FormControlLabel\n                value={EventTypes.Meeting}\n                control={<Radio />}\n                label=\"Meeting\"\n              />\n              <FormControlLabel\n                value={EventTypes.Task}\n                control={<Radio />}\n                label=\"Task\"\n              />\n            </RadioGroup>\n          </FormControl>\n          <TextField\n            id=\"time\"\n            label=\"Time\"\n            type=\"time\"\n            defaultValue={time}\n            onChange={(event) => setTime(event.target.value)}\n          />\n          <Grid container justify=\"flex-end\" style={{ marginTop: 20 }}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              endIcon={<SendIcon />}\n            >\n              Add\n            </Button>\n          </Grid>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default EventForm;\n","import React, { useContext } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport AddCircleOutlineOutlinedIcon from \"@material-ui/icons/AddCircleOutlineOutlined\";\nimport AppContext from \"../../context\";\ninterface Props {\n  isFormOpen: boolean;\n  setIsFormOpen: (isFormOpen: boolean) => void;\n}\n\nconst Header = (props: Props) => {\n  const { state } = useContext(AppContext);\n\n  const { isFormOpen, setIsFormOpen } = props;\n\n  return (\n    <Grid style={{ paddingLeft: 16 }}>\n      <Grid container justify=\"space-between\">\n        <Grid item xs={10}>\n          <Typography variant=\"h5\">{`Events for ${state.selectedDate}`}</Typography>\n        </Grid>\n        <Grid container item xs={1} justify=\"center\">\n          <AddCircleOutlineOutlinedIcon\n            fontSize=\"large\"\n            onClick={() => setIsFormOpen(!isFormOpen)}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import React, { useContext } from \"react\";\nimport moment from \"moment\";\nimport { Avatar, CardHeader, Grid, Typography } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AppContext from \"../../context\";\nimport { Event as EventInterface, ReducerTypes } from \"../../reducer\";\nimport { EventTypes } from \"../eventForm\";\n\ninterface color {\n  [key: string]: string;\n}\nexport const eventTypeColor: color = {\n  [EventTypes.Appointment]: \"#e63946\",\n  [EventTypes.Meeting]: \"#a8dadc\",\n  [EventTypes.Task]: \"#457b9d\",\n};\n\nconst Event = () => {\n  const { state, dispatch } = useContext(AppContext);\n\n  const deleteEvent = (index: number) => {\n    const eventsToSplice: Array<EventInterface> =\n      state.eventList[state.selectedDate];\n    eventsToSplice.splice(index, 1);\n    dispatch({\n      type: ReducerTypes.DeleteEvent,\n      payload: eventsToSplice,\n    });\n  };\n\n  return (\n    <div style={{ height: \"85vh\", overflowY: \"scroll\" }}>\n      {state.selectedDate &&\n      state.eventList &&\n      state.eventList[state.selectedDate] &&\n      state.eventList[state.selectedDate].length ? (\n        state.eventList[state.selectedDate].map(\n          (event: EventInterface, index: number) => (\n            <CardHeader\n              key={`${event.name}-${index}`}\n              avatar={\n                <Avatar style={{ backgroundColor: eventTypeColor[event.type] }}>\n                  {event.type}\n                </Avatar>\n              }\n              action={\n                <DeleteIcon\n                  style={{ marginTop: 15, cursor: \"pointer\" }}\n                  onClick={() => {\n                    deleteEvent(index);\n                  }}\n                />\n              }\n              title={event.name}\n              subheader={moment(event.time, \"HH:mm\").format(\"hh:mm A\")}\n            />\n          )\n        )\n      ) : (\n        <Grid\n          container\n          justify=\"space-between\"\n          style={{ paddingLeft: 16, marginBottom: 20 }}\n        >\n          <Grid item xs={6}>\n            <Typography variant=\"h6\">No Events</Typography>\n          </Grid>\n        </Grid>\n      )}\n    </div>\n  );\n};\n\nexport default Event;\n","import React from \"react\";\nimport Header from \"./header\";\nimport Event from \"./event\";\n\ninterface Props {\n  isFormOpen: boolean;\n  setIsFormOpen: (isFormOpen: boolean) => void;\n}\n\nconst EventList = (props: Props) => {\n  const { isFormOpen, setIsFormOpen } = props;\n  return (\n    <div>\n      <Header isFormOpen={isFormOpen} setIsFormOpen={setIsFormOpen} />\n      <Event />\n    </div>\n  );\n};\n\nexport default EventList;\n","import { Avatar, Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { EventTypes } from \"../eventForm\";\nimport { eventTypeColor } from \"../eventList/event\";\n\nconst Legend = () => {\n  const eventDetailsArray = [\n    {\n      type: EventTypes.Appointment,\n      name: \"Appointment\",\n    },\n    {\n      type: EventTypes.Meeting,\n      name: \"Meeting\",\n    },\n    {\n      type: EventTypes.Task,\n      name: \"Task\",\n    },\n  ];\n\n  return (\n    <Grid container direction=\"row\" spacing={2} style={{ marginTop: 10 }}>\n      {eventDetailsArray.map((eventDetail) => (\n        <Grid\n          key={eventDetail.name}\n          container\n          item\n          style={{ width: \"fit-content\" }}\n          direction=\"row\"\n          alignItems=\"center\"\n        >\n          <Avatar\n            style={{\n              backgroundColor: eventTypeColor[eventDetail.type],\n              marginRight: 5,\n            }}\n          >\n            {eventDetail.type}\n          </Avatar>\n          <Typography variant=\"subtitle1\">{eventDetail.name}</Typography>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Legend;\n","import React, { useState, useReducer } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Calendar from \"./components/calendar\";\nimport EventList from \"./components/eventList\";\nimport EventForm from \"./components/eventForm\";\nimport { Dialog } from \"@material-ui/core\";\nimport reducer from \"./reducer\";\nimport AppContext, { initialState } from \"./context\";\nimport Legend from \"./components/legend\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      <div className=\"App\" style={{ padding: 10 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={8}>\n            <Calendar />\n            <Legend />\n          </Grid>\n          <Grid item xs={4} style={{ padding: 0 }}>\n            <EventList isFormOpen={isFormOpen} setIsFormOpen={setIsFormOpen} />\n          </Grid>\n        </Grid>\n        <Dialog open={isFormOpen}>\n          <EventForm setIsFormOpen={setIsFormOpen} />\n        </Dialog>\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}